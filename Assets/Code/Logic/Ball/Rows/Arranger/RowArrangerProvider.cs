//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
namespace Game.Logic
{
	public class RowArrangerProvider
	{
		Dictionary<System.Type, IRowArrangeBall> _container = null;
		public RowArrangerProvider ()
		{
			_container = new Dictionary<Type, IRowArrangeBall> ();

			Init ();
		}

		void Init ()
		{
			Register (typeof(RegularRowArranger), new RegularRowArranger());
		}

		void Register (Type type, IRowArrangeBall arranger)
		{
			if (_container.ContainsKey (type)) {
				_container [type] = arranger;
			} else {
				_container.Add(type, arranger);
			}
		}

		public T GetArranger<T> () where T : IRowArrangeBall
		{
			if (_container.ContainsKey(typeof(T))) {
				return (T)_container[typeof(T)];
			}
			return default(T);
		}

		public object GetArranger(System.Type t)
		{
			if (_container.ContainsKey(t)) {
				return _container[t];
			}
			return default(object);
		}
	}
}

